// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  mainImage   String
  images      String[]
  description String
  openTime    String
  closeTime   String
  slug        String    @unique
  price       PRICE
  items       Item[]
  reviews     Review[]
  bookings    Booking[]
  tables      Table[]

  locationId Int
  location   Location @relation(fields: [locationId], references: [id])

  cuisineId Int
  cuisine   Cuisine @relation(fields: [cuisineId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          Int    @id @default(autoincrement())
  name        String
  price       String
  description String

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  city      String
  password  String
  email     String @unique
  phone     String

  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  text      String
  rating    Float

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Booking {
  id              Int      @id @default(autoincrement())
  numberOfPeople  Int
  bookingTime     DateTime
  bookerEmail     String
  bookerPhone     String
  bookerFirstName String
  bookerLastName  String
  bookerOccasion  String?
  bookerRequest   String?

  tables       BookingsOnTables[]
  restaurantId Int
  restaurant   Restaurant         @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id           Int                @id @default(autoincrement())
  seats        Int
  restaurantId Int
  Restaurant   Restaurant         @relation(fields: [restaurantId], references: [id])
  bookings     BookingsOnTables[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model BookingsOnTables {
  bookingId Int
  bookings  Booking @relation(fields: [bookingId], references: [id])

  tableId Int
  table   Table @relation(fields: [tableId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([bookingId, tableId])
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
